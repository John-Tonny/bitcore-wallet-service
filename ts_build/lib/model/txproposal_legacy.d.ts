export interface ITxProposal {
    version: string;
    type: string;
    createdOn: number;
    id: number;
    walletId: string;
    creatorId: string;
    outputs: any[];
    toAddress: string;
    amount: number;
    message: string;
    payProUrl: string;
    proposalSignature: string;
    changeAddress: string;
    inputs: any[];
    requiredSignatures: number;
    requiredRejections: number;
    walletN: number;
    status: string;
    txid: string;
    broadcastedOn: string;
    inputPaths: string;
    actions: any[];
    outputOrder: number;
    coin: string;
    network: string;
    fee: number;
    feePerKb: number;
    excludeUnconfirmedUtxos: boolean;
    proposalSignaturePubKey: string;
    proposalSignaturePubKeySig: string;
    addressType: string;
    derivationStrategy: string;
    customData: any;
}
export declare class TxProposalLegacy {
    version: string;
    type: string;
    createdOn: number;
    id: number;
    walletId: string;
    creatorId: string;
    outputs: any[];
    toAddress: string;
    amount: number;
    message: string;
    payProUrl: string;
    proposalSignature: string;
    changeAddress: string;
    inputs: any[];
    requiredSignatures: number;
    requiredRejections: number;
    walletN: number;
    status: string;
    txid: string;
    broadcastedOn: number;
    inputPaths: string;
    actions: any[];
    outputOrder: number;
    coin: string;
    network: string;
    fee: number;
    feePerKb: number;
    excludeUnconfirmedUtxos: boolean;
    proposalSignaturePubKey: string;
    proposalSignaturePubKeySig: string;
    addressType: string;
    derivationStrategy: string;
    customData: any;
    static Types: {
        SIMPLE: string;
        MULTIPLEOUTPUTS: string;
        EXTERNAL: string;
    };
    static fromObj(obj: any): TxProposalLegacy;
    toObject(): any;
    _updateStatus(): void;
    getBitcoreTx(): void;
    getRawTx(): void;
    getTotalAmount(): any;
    getActors(): any[];
    getApprovers(): any[];
    getActionBy(copayerId: any): any;
    addAction(copayerId: any, type: any, comment: any, signatures?: any, xpub?: any): void;
    sign(): void;
    reject(copayerId: any, reason: any): void;
    isPending(): boolean;
    isAccepted(): boolean;
    isRejected(): boolean;
    isBroadcasted(): boolean;
    setBroadcasted(): void;
}
//# sourceMappingURL=txproposal_legacy.d.ts.map